// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 10.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Sage.SData.Compiler
{
    using System.IO;
    using System.Text;
    using System.Collections.Generic;
    using System;


#line 1 "C:\Apps\workspaces\web api demos\billableservices\ConsoleApplication2\ClassLibrary1\ControllerTemplate1.tt"
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "10.0.0.0")]
    public partial class ControllerTemplate1 : ControllerTemplate1Base
    {
        public ControllerTemplate1(string initModelLocation, string initModelNamespace, string initRepositoryNamespace)
        {
            this._modelNameSpaceField = initModelNamespace;
            this._locationOfModelField = initModelLocation;
            this._repositoryNameSpaceField = initRepositoryNamespace;
        }


        public virtual string TransformText()
        {
            this.Write(" \r\n");
            this.Write("\r\n");

#line 12 "C:\Apps\workspaces\web api demos\billableservices\ConsoleApplication2\ClassLibrary1\ControllerTemplate1.tt"

            // set these variables to values appropriate for your Solution:
            string namespaceName = "GenController.Controllers";

            string[] files = Directory.GetFileSystemEntries(locationOfModel, "*.cs");


#line default
#line hidden
            this.Write("\r\nusing System;\r\nusing Sage.SData.Repository;\r\nusing Sage.SData.Controllers;\r\nusi" +
                    "ng System.Collections.Generic; \r\nusing System.Web.Http;\r\nusing Microsoft.Practic" +
                    "es.Unity;\r\nusing ");

#line 25 "C:\Apps\workspaces\web api demos\billableservices\ConsoleApplication2\ClassLibrary1\ControllerTemplate1.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.modelNameSpace));

#line default
#line hidden
            this.Write(";\r\nusing ");

#line 26 "C:\Apps\workspaces\web api demos\billableservices\ConsoleApplication2\ClassLibrary1\ControllerTemplate1.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.repositoryNameSpace));

#line default
#line hidden
            this.Write(";\r\n\r\nnamespace Sage.SData.Compiler\r\n{\r\n");

#line 30 "C:\Apps\workspaces\web api demos\billableservices\ConsoleApplication2\ClassLibrary1\ControllerTemplate1.tt"

            PushIndent("\t");


#line default
#line hidden
            this.Write("internal class DependencyUtil : Sage.SDataHandler.Compiler.IDependencyUtil\r\n{\r\n");

#line 35 "C:\Apps\workspaces\web api demos\billableservices\ConsoleApplication2\ClassLibrary1\ControllerTemplate1.tt"

            PushIndent("\t");


#line default
#line hidden
            this.Write("\r\npublic void RegisterDependencyResolver(HttpConfiguration httpConfig)\r\n{\r\n");

#line 41 "C:\Apps\workspaces\web api demos\billableservices\ConsoleApplication2\ClassLibrary1\ControllerTemplate1.tt"

            PushIndent("\t");


#line default
#line hidden
            this.Write("\r\nUnityContainer unity = new UnityContainer();\r\n\r\n");

#line 47 "C:\Apps\workspaces\web api demos\billableservices\ConsoleApplication2\ClassLibrary1\ControllerTemplate1.tt"

            foreach (string file in files)
            {

                string[] segs = file.Split('\\');
                string fileName = segs[segs.Length - 1];

                if (fileName.Contains(".Context.") || fileName.Contains(".Designer."))
                    continue;

                // search for a [Datacontract] if this model does not contain it then can't serialize so no
                // point in generating a controller for it; this helps filter out none model entity classes in folder
                string line;
                bool foundDataMember = false;
                StreamReader fileReader = new StreamReader(file);
                while ((line = fileReader.ReadLine()) != null)
                {
                    if (line.Contains("[DataContract]"))
                    {
                        foundDataMember = true;
                        break;
                    }
                }

                fileReader.Close();

                if (!foundDataMember)
                    continue;

                int iofext = fileName.IndexOf(".");
                if (iofext > 0)
                {
                    fileName = fileName.Substring(0, iofext);
                }



                if (String.IsNullOrEmpty(fileName))
                    continue;

                string modelName = fileName;
                string className = fileName + "Controller";



#line default
#line hidden
                this.Write("unity.RegisterType<");

#line 91 "C:\Apps\workspaces\web api demos\billableservices\ConsoleApplication2\ClassLibrary1\ControllerTemplate1.tt"
                this.Write(this.ToStringHelper.ToStringWithCulture(namespaceName));

#line default
#line hidden
                this.Write(".");

#line 91 "C:\Apps\workspaces\web api demos\billableservices\ConsoleApplication2\ClassLibrary1\ControllerTemplate1.tt"
                this.Write(this.ToStringHelper.ToStringWithCulture(className));

#line default
#line hidden
                this.Write(">();\r\n\r\n// Register the Repository for the Controller\r\nunity.RegisterType<IReposi" +
                        "tory<");

#line 94 "C:\Apps\workspaces\web api demos\billableservices\ConsoleApplication2\ClassLibrary1\ControllerTemplate1.tt"
                this.Write(this.ToStringHelper.ToStringWithCulture(modelName));

#line default
#line hidden
                this.Write(">, DbContextRepository<");

#line 94 "C:\Apps\workspaces\web api demos\billableservices\ConsoleApplication2\ClassLibrary1\ControllerTemplate1.tt"
                this.Write(this.ToStringHelper.ToStringWithCulture(modelName));

#line default
#line hidden
                this.Write(">>( new HierarchicalLifetimeManager() );\r\n");

#line 95 "C:\Apps\workspaces\web api demos\billableservices\ConsoleApplication2\ClassLibrary1\ControllerTemplate1.tt"

            }


#line default
#line hidden
            this.Write("\r\nhttpConfig.DependencyResolver = new Sage.SDataHandler.Compiler.IoCContainer(uni" +
                    "ty);\r\n");

#line 100 "C:\Apps\workspaces\web api demos\billableservices\ConsoleApplication2\ClassLibrary1\ControllerTemplate1.tt"

            PopIndent();


#line default
#line hidden
            this.Write("\r\n}\r\n");

#line 105 "C:\Apps\workspaces\web api demos\billableservices\ConsoleApplication2\ClassLibrary1\ControllerTemplate1.tt"

            PopIndent();


#line default
#line hidden
            this.Write("}\r\n\r\n");

#line 110 "C:\Apps\workspaces\web api demos\billableservices\ConsoleApplication2\ClassLibrary1\ControllerTemplate1.tt"

            PopIndent();


#line default
#line hidden

#line 113 "C:\Apps\workspaces\web api demos\billableservices\ConsoleApplication2\ClassLibrary1\ControllerTemplate1.tt"

            PopIndent();


#line default
#line hidden
            this.Write("}\r\n\r\nnamespace ");

#line 118 "C:\Apps\workspaces\web api demos\billableservices\ConsoleApplication2\ClassLibrary1\ControllerTemplate1.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(namespaceName));

#line default
#line hidden
            this.Write("\r\n{\r\n");

#line 120 "C:\Apps\workspaces\web api demos\billableservices\ConsoleApplication2\ClassLibrary1\ControllerTemplate1.tt"

            PushIndent("\t");


#line default
#line hidden
            this.Write("\r\n");

#line 124 "C:\Apps\workspaces\web api demos\billableservices\ConsoleApplication2\ClassLibrary1\ControllerTemplate1.tt"

            // Find a path within the same project as the text template:

            // string modelDirectory = this.Host.ResolvePath("Models");

            foreach (string file in files)
            {
                string[] segs = file.Split('\\');
                string fileName = segs[segs.Length - 1];

                if (fileName.Contains(".Context.") || fileName.Contains(".Designer."))
                    continue;

                // search for a [Datacontract] if this model does not contain it then can't serialize so no
                // point in generating a controller for it; this helps filter out none model entity classes in folder
                string line;
                bool foundDataMember = false;
                StreamReader fileReader = new StreamReader(file);
                while ((line = fileReader.ReadLine()) != null)
                {
                    if (line.Contains("[DataContract]"))
                    {
                        foundDataMember = true;
                        break;
                    }
                }

                fileReader.Close();

                if (!foundDataMember)
                    continue;

                int iofext = fileName.IndexOf(".");
                if (iofext > 0)
                {
                    fileName = fileName.Substring(0, iofext);
                }



                if (String.IsNullOrEmpty(fileName))
                    continue;

                string modelName = fileName;
                string className = fileName + "Controller";


#line default
#line hidden
                this.Write(" public class ");

#line 170 "C:\Apps\workspaces\web api demos\billableservices\ConsoleApplication2\ClassLibrary1\ControllerTemplate1.tt"
                this.Write(this.ToStringHelper.ToStringWithCulture(className));

#line default
#line hidden
                this.Write(" : DefaultController<");

#line 170 "C:\Apps\workspaces\web api demos\billableservices\ConsoleApplication2\ClassLibrary1\ControllerTemplate1.tt"
                this.Write(this.ToStringHelper.ToStringWithCulture(modelName));

#line default
#line hidden
                this.Write(">\r\n { \r\n\tpublic ");

#line 172 "C:\Apps\workspaces\web api demos\billableservices\ConsoleApplication2\ClassLibrary1\ControllerTemplate1.tt"
                this.Write(this.ToStringHelper.ToStringWithCulture(className));

#line default
#line hidden
                this.Write("(IRepository<");

#line 172 "C:\Apps\workspaces\web api demos\billableservices\ConsoleApplication2\ClassLibrary1\ControllerTemplate1.tt"
                this.Write(this.ToStringHelper.ToStringWithCulture(modelName));

#line default
#line hidden
                this.Write("> repo) : base(repo){}\r\n\t\r\n }\r\n");

#line 175 "C:\Apps\workspaces\web api demos\billableservices\ConsoleApplication2\ClassLibrary1\ControllerTemplate1.tt"

            } // close for each


#line default
#line hidden

#line 178 "C:\Apps\workspaces\web api demos\billableservices\ConsoleApplication2\ClassLibrary1\ControllerTemplate1.tt"

            PopIndent();


#line default
#line hidden
            this.Write("\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }

#line 1 "C:\Apps\workspaces\web api demos\billableservices\ConsoleApplication2\ClassLibrary1\ControllerTemplate1.tt"

        private string _modelNameSpaceField;

        /// <summary>
        /// Access the modelNameSpace parameter of the template.
        /// </summary>
        private string modelNameSpace
        {
            get
            {
                return this._modelNameSpaceField;
            }
        }

        private string _repositoryNameSpaceField;

        /// <summary>
        /// Access the repositoryNameSpace parameter of the template.
        /// </summary>
        private string repositoryNameSpace
        {
            get
            {
                return this._repositoryNameSpaceField;
            }
        }

        private string _locationOfModelField;

        /// <summary>
        /// Access the locationOfModel parameter of the template.
        /// </summary>
        private string locationOfModel
        {
            get
            {
                return this._locationOfModelField;
            }
        }


        public virtual void Initialize()
        {
            if ((this.Errors.HasErrors == false))
            {
                bool modelNameSpaceValueAcquired = false;
                if (this.Session.ContainsKey("modelNameSpace"))
                {
                    if ((typeof(string).IsAssignableFrom(this.Session["modelNameSpace"].GetType()) == false))
                    {
                        this.Error("The type \'System.String\' of the parameter \'modelNameSpace\' did not match the type" +
                                " of the data passed to the template.");
                    }
                    else
                    {
                        this._modelNameSpaceField = ((string)(this.Session["modelNameSpace"]));
                        modelNameSpaceValueAcquired = true;
                    }
                }
                if ((modelNameSpaceValueAcquired == false))
                {
                    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("modelNameSpace");
                    if ((data != null))
                    {
                        if ((typeof(string).IsAssignableFrom(data.GetType()) == false))
                        {
                            this.Error("The type \'System.String\' of the parameter \'modelNameSpace\' did not match the type" +
                                    " of the data passed to the template.");
                        }
                        else
                        {
                            this._modelNameSpaceField = ((string)(data));
                        }
                    }
                }
                bool repositoryNameSpaceValueAcquired = false;
                if (this.Session.ContainsKey("repositoryNameSpace"))
                {
                    if ((typeof(string).IsAssignableFrom(this.Session["repositoryNameSpace"].GetType()) == false))
                    {
                        this.Error("The type \'System.String\' of the parameter \'repositoryNameSpace\' did not match the" +
                                " type of the data passed to the template.");
                    }
                    else
                    {
                        this._repositoryNameSpaceField = ((string)(this.Session["repositoryNameSpace"]));
                        repositoryNameSpaceValueAcquired = true;
                    }
                }
                if ((repositoryNameSpaceValueAcquired == false))
                {
                    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("repositoryNameSpace");
                    if ((data != null))
                    {
                        if ((typeof(string).IsAssignableFrom(data.GetType()) == false))
                        {
                            this.Error("The type \'System.String\' of the parameter \'repositoryNameSpace\' did not match the" +
                                    " type of the data passed to the template.");
                        }
                        else
                        {
                            this._repositoryNameSpaceField = ((string)(data));
                        }
                    }
                }
                bool locationOfModelValueAcquired = false;
                if (this.Session.ContainsKey("locationOfModel"))
                {
                    if ((typeof(string).IsAssignableFrom(this.Session["locationOfModel"].GetType()) == false))
                    {
                        this.Error("The type \'System.String\' of the parameter \'locationOfModel\' did not match the typ" +
                                "e of the data passed to the template.");
                    }
                    else
                    {
                        this._locationOfModelField = ((string)(this.Session["locationOfModel"]));
                        locationOfModelValueAcquired = true;
                    }
                }
                if ((locationOfModelValueAcquired == false))
                {
                    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("locationOfModel");
                    if ((data != null))
                    {
                        if ((typeof(string).IsAssignableFrom(data.GetType()) == false))
                        {
                            this.Error("The type \'System.String\' of the parameter \'locationOfModel\' did not match the typ" +
                                    "e of the data passed to the template.");
                        }
                        else
                        {
                            this._locationOfModelField = ((string)(data));
                        }
                    }
                }


            }
        }



#line default
#line hidden
    }

#line default
#line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "10.0.0.0")]
    public class ControllerTemplate1Base
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0)
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}