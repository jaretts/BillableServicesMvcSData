<#@ template language="C#v3.5" hostspecific="true" #>
<#@ output extension="cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using BillableModel.Models;
using SDataRepository;

namespace BillableServicesMvcSData.Controllers 
{

<#
 // Find a path within the same project as the text template:
 
// string modelDirectory = this.Host.ResolvePath("Models");
 string[] files = Directory.GetFileSystemEntries(@"C:\Apps\workspaces\web api demos\billableservices\BillableServicesMvcSData\BillableModel\Models", "*.cs");

 foreach (string file in files) 
 {
	string[] segs = file.Split('\\');
	string fileName = segs[segs.Length-1];

    if (fileName.Contains(".Context.") || fileName.Contains(".Designer."))
         continue;

	// search for a [Datacontract] if this model does not contain it then can't serialize so no
	// point in generating a controller for it; this helps filter out none model entity classes in folder
	bool foundDataMember = false;
	string line;
	StreamReader fileReader = new StreamReader(file); 
	while ((line = fileReader.ReadLine()) != null)  
	{
		if (line.Contains("[DataContract]"))
		{
			foundDataMember = true;
			break;
		}
	}

	fileReader.Close();

	if (!foundDataMember)
		continue;

    int iofext = fileName.IndexOf(".");
        if(iofext > 0)
        {
            fileName = fileName.Substring(0, iofext);
        }

		string modelName = fileName; 
		string className = fileName + "Controller";
 #>
 public class <#= className #> : DefaultController<<#=modelName#>>
    { 
		public <#= className#>(IRepository<<#=modelName#>> repo) : base(repo) 
        {
		}

        [HttpGet]
        [ActionName("SDataSingleResourceKind")]
        override public <#=modelName#> GetSingle(int selector)
        {
            return this.GetSingle(selector, null);
        }

        [HttpGet]
        [ActionName("SDataSingleResourceKind")] 
        override public <#=modelName#> GetSingle(int selector, String select)
        {
            //return base.GetCollection(select).FirstOrDefault(y => y.<#=modelName#>ID == selector);
            return base.GetCollection(select).FirstOrDefault(y => y.ID == selector);
        }

	}
<#
 }

#>
}